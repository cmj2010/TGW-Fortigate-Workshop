{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "(v2.0) AWS CloudFormation Template to deploy a Lambda based Active-Passive EIP & Route Failover solution with two FortiGates",
	"Metadata": {
		"AWS::CloudFormation::Interface": {
			"ParameterGroups": [{
					"Label": {
						"default": "VPC Configuration"
					},
					"Parameters": [
						"VPCID",
						"VPCCIDR",
						"PublicSubnet1",
						"PrivateSubnet1",
						"PublicSubnet2",
						"PrivateSubnet2",
						"TgwSubnet1",
						"TgwSubnet2"
					]
				},
				{
					"Label": {
						"default": "FortiGate Instance Configuration"
					},
					"Parameters": [
						"AZForFGT1",
						"AZForFGT2",
						"InstanceType",
						"CIDRForInstanceAccess",
						"KeyPair",
						"InitS3Bucket",
						"InitS3BucketRegion",
						"FortiGate1LicenseFile",
						"FortiGate2LicenseFile",
						"PublicSubnet1RouterIP",
						"PublicSubnet2RouterIP",
						"PrivateSubnet1RouterIP",
						"PrivateSubnet2RouterIP"
					]
				},
				{
					"Label": {
						"default": "Interface IP Configuration for FortiGate1"
					},
					"Parameters": [
						"FortiGate1PublicIP",
						"FortiGate1SecondPublicIP",
						"FortiGate1PrivateIP"

					]
				},
				{
					"Label": {
						"default": "Interface IP Configuration for FortiGate2"
					},
					"Parameters": [
						"FortiGate2PublicIP",
						"FortiGate2SecondPublicIP",
						"FortiGate2PrivateIP"

					]
				},
				{
					"Label": {
						"default": "Lambda Configuration"
					},
					"Parameters": [
						"HAPairTagValue",
						"LambdaHealthCheckPort",
						"EmailNotification"
					]
				}
			]
		}
	},
	"Parameters": {
		"VPCID": {
			"Type": "AWS::EC2::VPC::Id",
			"Description": "Select the VPC to use"
		},
		"VPCCIDR": {
			"Type": "String",
			"Default": "10.0.0.0/16",
			"Description": "Provide the network CIDR for the VPC"
		},
		"SPOKE1VPCCIDR": {
			"Type": "String",
			"Default": "10.1.0.0/16",
			"Description": "Provide the network CIDR for the VPC"
		},
		"SPOKE2VPCCIDR": {
			"Type": "String",
			"Default": "10.2.0.0/16",
			"Description": "Provide the network CIDR for the VPC"
		},
		"PublicSubnet1": {
			"Type": "AWS::EC2::Subnet::Id",
			"Description": "Select the subnet to use for PublicSubnet1"
		},
		"PrivateSubnet1": {
			"Type": "AWS::EC2::Subnet::Id",
			"Description": "Select the subnet to use for PrivateSubnet1"
		},
		"TgwSubnet1": {
			"Type": "AWS::EC2::Subnet::Id",
			"Description": "Select the subnet to use for TgwSubnet1"
		},
		"PublicSubnet2": {
			"Type": "AWS::EC2::Subnet::Id",
			"Description": "Select the subnet to use for PublicSubnet2"
		},
		"PrivateSubnet2": {
			"Type": "AWS::EC2::Subnet::Id",
			"Description": "Select the subnet to use for PrivateSubnet2"
		},
		"TgwSubnet2": {
			"Type": "AWS::EC2::Subnet::Id",
			"Description": "Select the subnet to use for TgwSubnet2"
		},
		"AZForFGT1": {
			"Type": "AWS::EC2::AvailabilityZone::Name",
			"Description": "Select an Availability Zone for FortiGate1"
		},
		"AZForFGT2": {
			"Type": "AWS::EC2::AvailabilityZone::Name",
			"Description": "Select an Availability Zone for FortiGate2ï¼Œ please choolse AZ3 if in Seoul Region"
		},
		"InstanceType": {
			"Type": "String",
			"Default": "c5.large",
			"Description": "Select the instance type for the FortiGates",
			"AllowedValues": [
				"t2.small",
				"c5.large",
				"c5.xlarge",
				"c5.2xlarge",
				"c5.4xlarge",
				"c5.9xlarge",
				"c5.18xlarge",
				"c5n.large",
				"c5n.xlarge",
				"c5n.2xlarge",
				"c5n.4xlarge",
				"c5n.9xlarge",
				"c5n.18xlarge"
			]
		},
		"CIDRForInstanceAccess": {
			"Type": "String",
			"Default": "0.0.0.0/0",
			"Description": "Provide a network CIDR from which the FortiGate instances will be accessed"
		},
		"KeyPair": {
			"Type": "AWS::EC2::KeyPair::KeyName",
			"Description": "Select a keypair to associate with the FortiGates"
		},
		"InitS3Bucket": {
			"Type": "String",
			"MinLength": "1",
			"Description": "Provide the Init S3 Bucket name, where your license files and config files exists"
		},
		"InitS3BucketRegion": {
			"Type": "String",
			"Description": "Select the Region where the Init S3 Bucket exists",
			"AllowedValues": [
				"ap-northeast-1",
				"ap-northeast-2",
				"ap-south-1",
				"ap-southeast-1",
				"ap-southeast-2",
				"ca-central-1",
				"eu-central-1",
				"eu-west-1",
				"eu-west-2",
				"eu-west-3",
				"sa-east-1",
				"us-east-1",
				"us-east-2",
				"us-west-1",
				"us-west-2"
			]
		},
		"PublicSubnet1RouterIP": {
			"Type": "String",
			"Default": "10.0.0.1",
			"Description": "Provide the IP address of the AWS intrinsic router (First IP from PublicSubnet1)"
		},
		"PublicSubnet2RouterIP": {
			"Type": "String",
			"Default": "10.0.2.1",
			"Description": "Provide the IP address of the AWS intrinsic router (First IP from PublicSubnet2)"
		},
		"PrivateSubnet1RouterIP": {
			"Type": "String",
			"Default": "10.0.1.1",
			"Description": "Provide the IP address of the AWS intrinsic router (First IP from PrivateSubnet1)"
		},
		"PrivateSubnet2RouterIP": {
			"Type": "String",
			"Default": "10.0.3.1",
			"Description": "Provide the IP address of the AWS intrinsic router (First IP from PrivateSubnet2)"
		},
		"FortiGate1PublicIP": {
			"Type": "String",
			"Default": "10.0.0.10/24",
			"Description": "Provide the primary IP address in CIDR form for the public interface of FortiGate1 (IP from PublicSubnet1)"
		},
		"FortiGate2PublicIP": {
			"Type": "String",
			"Default": "10.0.2.10/24",
			"Description": "Provide the primary IP address in CIDR form for the public interface of FortiGate2 (IP from PublicSubnet2)"
		},
		"FortiGate1PrivateIP": {
			"Type": "String",
			"Default": "10.0.1.10/24",
			"Description": "Provide the IP address in CIDR form for the private interface of FortiGate1 (IP from PrivateSubnet1)"
		},
		"FortiGate2PrivateIP": {
			"Type": "String",
			"Default": "10.0.3.10/24",
			"Description": "Provide the IP address in CIDR form for the public interface of FortiGate2 (IP from PrivateSubnet2)"
		},
		"FortiGate1SecondPublicIP": {
			"Type": "String",
			"Default": "10.0.0.11/24",
			"Description": "Provide the second IP address in CIDR form for the public interface of FortiGate1 (IP from PublicSubnet1)"
		},
		"FortiGate2SecondPublicIP": {
			"Type": "String",
			"Default": "10.0.2.11/24",
			"Description": "Provide the second IP address in CIDR form for the public interface of FortiGate2 (IP from PublicSubnet2)"
		},
		"FortiGate1LicenseFile": {
			"Type": "String",
			"MinLength": "1",
			"Description": "Provide the name of the license file in the Init S3 Bucket for FortiGate1 (ie fgt1.lic or prefix/fgt1.lic)"
		},
		"FortiGate2LicenseFile": {
			"Type": "String",
			"MinLength": "1",
			"Description": "Provide the name of the license file in the Init S3 Bucket for FortiGate2 (ie fgt2.lic or prefix/fgt2.lic)"
		},
		"HAPairTagValue": {
			"Type": "String",
			"Default": "pair1",
			"Description": "Provide a string value for the ha:pair tag to uniquely identify the two HA instances within your VPC"
		},
		"LambdaHealthCheckPort": {
			"Type": "String",
			"Default": "541",
			"Description": "Provide the health check port that will be monitored by Lambda"
		},
		"EmailNotification": {
			"Type": "String",
			"Default": "admin@example.com",
			"Description": "Provide an email address to receive notifications when the CloudWatch Failover Alarm is triggered"
		}
	},
	"Mappings": {
		"RegionMap": {
			"ap-northeast-1": {
				"LambdaCode": "fortibucket-ap-northeast-1",
				"fgtami": "ami-021c40c8d7d07a99a"
			},
			"ap-northeast-2": {
				"LambdaCode": "fortibucket-ap-northeast-2",
				"fgtami": "ami-09c6e2b31c5aeeef5"
			},
			"ap-south-1": {
				"LambdaCode": "fortibucket-ap-south-1",
				"fgtami": "ami-066e2d633f25457cf"
			},
			"ap-southeast-1": {
				"LambdaCode": "fortibucket-ap-southeast-1",
				"fgtami": "ami-0204d8fd7946a0129"
			},
			"ap-southeast-2": {
				"LambdaCode": "fortibucket-ap-southeast-2",
				"fgtami": "ami-03812d85cf5ab60b6"
			},
			"ca-central-1": {
				"LambdaCode": "fortibucket-ca-central-1",
				"fgtami": "ami-0e2dfde704479020d"
			},
			"eu-central-1": {
				"LambdaCode": "fortibucket-eu-central-1",
				"fgtami": "ami-084fbc093774e3d55"
			},
			"eu-west-1": {
				"LambdaCode": "fortibucket-eu-west-1",
				"fgtami": "ami-01e8b02ab1ac6f0be"
			},
			"eu-west-2": {
				"LambdaCode": "fortibucket-eu-west-2",
				"fgtami": "ami-0fee8ad3dbfdc59f7"
			},
			"eu-west-3": {
				"LambdaCode": "fortibucket-eu-west-3",
				"fgtami": "ami-01f28c942780fe93d"
			},
			"sa-east-1": {
				"LambdaCode": "fortibucket-sa-east-1",
				"fgtami": "ami-0e2e26cbaae02e210"
			},
			"us-east-1": {
				"LambdaCode": "fortibucket-us-east-1",
				"fgtami": "ami-0a3594eadb2bcabd6"
			},
			"us-east-2": {
				"LambdaCode": "fortibucket-us-east-2",
				"fgtami": "ami-06c0b5327ae077f9b"
			},
			"us-west-1": {
				"LambdaCode": "fortibucket-us-west-1",
				"fgtami": "ami-0a2dd80d792806156"
			},
			"us-west-2": {
				"LambdaCode": "fortibucket-us-west-2",
				"fgtami": "ami-0e02bbdf523a30000"
			}
		}
	},
	"Conditions": {},
	"Resources": {
		"InstanceRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
						"Effect": "Allow",
						"Principal": {
							"Service": ["ec2.amazonaws.com"]
						},
						"Action": ["sts:AssumeRole"]
					}]
				},
				"Path": "/",
				"Policies": [{
					"PolicyName": "ApplicationPolicy",
					"PolicyDocument": {
						"Version": "2012-10-17",
						"Statement": [{
							"Effect": "Allow",
							"Action": [
								"s3:GetObject"
							],
							"Resource": "*"
						}]
					}
				}]
			}
		},
		"InstanceProfile": {
			"Type": "AWS::IAM::InstanceProfile",
			"Properties": {
				"Path": "/",
				"Roles": [{
					"Ref": "InstanceRole"
				}]
			}
		},
		"FGTSecGrpBase": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"VpcId": {
					"Ref": "VPCID"
				},
				"GroupDescription": "FGTSecGrp",
				"SecurityGroupIngress": [{
						"Description": "Allow remote access to FGT",
						"IpProtocol": "-1",
						"FromPort": "0",
						"ToPort": "65535",
						"CidrIp": {
							"Ref": "CIDRForInstanceAccess"
						}
					},
					{
						"Description": "Allow local VPC access to FGT",
						"IpProtocol": "-1",
						"FromPort": "0",
						"ToPort": "65535",
						"CidrIp": {
							"Ref": "VPCCIDR"
						}
					}
				]
			}
		},
		"FGTSecGrpFGTRule": {
			"DependsOn": "FGTSecGrpBase",
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"GroupId": {
					"Ref": "FGTSecGrpBase"
				},
				"Description": "Allow FGTs to access each other",
				"IpProtocol": "-1",
				"FromPort": "0",
				"ToPort": "65535",
				"SourceSecurityGroupId": {
					"Ref": "FGTSecGrpBase"
				}
			}
		},
		"FGTSecGrpHealthCheckrule": {
			"DependsOn": "FGTSecGrpBase",
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"GroupId": {
					"Ref": "FGTSecGrpBase"
				},
				"Description": "Allow Lambda ENIs to access FGTs on HealthCheckPort",
				"IpProtocol": "tcp",
				"FromPort": {
					"Ref": "LambdaHealthCheckPort"
				},
				"ToPort": {
					"Ref": "LambdaHealthCheckPort"
				},
				"SourceSecurityGroupId": {
					"Ref": "LambdaSecGrp"
				}
			}
		},
		"Fgt1": {
			"DependsOn": "RunInitFunction",
			"Type": "AWS::EC2::Instance",
			"Properties": {
				"ImageId": {
					"Fn::FindInMap": ["RegionMap", {
						"Ref": "AWS::Region"
					}, "fgtami"]
				},
				"InstanceType": {
					"Ref": "InstanceType"
				},
				"IamInstanceProfile": {
					"Ref": "InstanceProfile"
				},
				"KeyName": {
					"Ref": "KeyPair"
				},
				"NetworkInterfaces": [{
						"NetworkInterfaceId": {
							"Ref": "Fgt1ENI0"
						},
						"DeviceIndex": "0"
					},
					{
						"NetworkInterfaceId": {
							"Ref": "Fgt1ENI1"
						},
						"DeviceIndex": "1"
					}
				],
				"Tags": [{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"", [{
										"Ref": "AWS::StackName"
									},
									"-Fgt1"
								]
							]
						}
					},
					{
						"Key": "ha:pair",
						"Value": {
							"Ref": "HAPairTagValue"
						}
					},
					{
						"Key": "ha:status",
						"Value": "active"
					},
					{
						"Key": "ha:time",
						"Value": ""
					}
				],
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": ["", [
							"{\n",
							"\"bucket\"", " : \"", {
								"Ref": "InitS3Bucket"
							}, "\"", ",\n",
							"\"region\"", " : ", "\"", {
								"Ref": "InitS3BucketRegion"
							}, "\"", ",\n",
							"\"license\"", " : ", "\"", "/", {
								"Ref": "FortiGate1LicenseFile"
							}, "\"", ",\n",
							"\"config\"", " : ", "\"", "/fgt1.txt\"", "\n",
							"}"
						]]
					}
				}
			}
		},
		"Fgt2": {
			"DependsOn": "RunInitFunction",
			"Type": "AWS::EC2::Instance",
			"Properties": {
				"ImageId": {
					"Fn::FindInMap": ["RegionMap", {
						"Ref": "AWS::Region"
					}, "fgtami"]
				},
				"InstanceType": {
					"Ref": "InstanceType"
				},
				"IamInstanceProfile": {
					"Ref": "InstanceProfile"
				},
				"KeyName": {
					"Ref": "KeyPair"
				},
				"NetworkInterfaces": [{
						"NetworkInterfaceId": {
							"Ref": "Fgt2ENI0"
						},
						"DeviceIndex": "0"
					},
					{
						"NetworkInterfaceId": {
							"Ref": "Fgt2ENI1"
						},
						"DeviceIndex": "1"
					}
				],
				"Tags": [{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"", [{
										"Ref": "AWS::StackName"
									},
									"-Fgt2"
								]
							]
						}
					},
					{
						"Key": "ha:pair",
						"Value": {
							"Ref": "HAPairTagValue"
						}
					},
					{
						"Key": "ha:status",
						"Value": "passive"
					},
					{
						"Key": "ha:time",
						"Value": ""
					}
				],
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": ["", [
							"{\n",
							"'bucket' : '", {
								"Ref": "InitS3Bucket"
							}, "',\n",
							"'region' : '", {
								"Ref": "InitS3BucketRegion"
							}, "',\n",
							"'license' : '/", {
								"Ref": "FortiGate2LicenseFile"
							}, "',\n",
							"'config' : '/fgt2.txt'\n",
							"}"
						]]
					}
				}
			}
		},
		"Fgt1ENI0": {
			"Type": "AWS::EC2::NetworkInterface",
			"Properties": {
				"Description": "port1",
				"GroupSet": [{
					"Ref": "FGTSecGrpBase"
				}],
				"SourceDestCheck": "false",
				"SubnetId": {
					"Ref": "PublicSubnet1"
				},
				"PrivateIpAddresses": [{
						"PrivateIpAddress": {
							"Fn::Select": ["0", {
								"Fn::Split": ["/", {
									"Ref": "FortiGate1PublicIP"
								}]
							}]
						},
						"Primary": "true"
					},
					{
						"PrivateIpAddress": {
							"Fn::Select": ["0", {
								"Fn::Split": ["/", {
									"Ref": "FortiGate1SecondPublicIP"
								}]
							}]
						},
						"Primary": "false"
					}
				],
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Join": [
							"", [{
									"Ref": "AWS::StackName"
								},
								"-Fgt1ENI0"
							]
						]
					}
				}, {
					"Key": "Interface",
					"Value": "eth0"
				}]
			}
		},
		"Fgt2ENI0": {
			"Type": "AWS::EC2::NetworkInterface",
			"Properties": {
				"Description": "port1",
				"GroupSet": [{
					"Ref": "FGTSecGrpBase"
				}],
				"SourceDestCheck": "false",
				"SubnetId": {
					"Ref": "PublicSubnet2"
				},
				"PrivateIpAddresses": [{
						"PrivateIpAddress": {
							"Fn::Select": ["0", {
								"Fn::Split": ["/", {
									"Ref": "FortiGate2PublicIP"
								}]
							}]
						},
						"Primary": "true"
					},
					{
						"PrivateIpAddress": {
							"Fn::Select": ["0", {
								"Fn::Split": ["/", {
									"Ref": "FortiGate2SecondPublicIP"
								}]
							}]
						},
						"Primary": "false"
					}
				],
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Join": [
							"", [{
									"Ref": "AWS::StackName"
								},
								"-Fgt2ENI0"
							]
						]
					}
				}, {
					"Key": "Interface",
					"Value": "eth0"
				}]
			}
		},
		"Fgt1ENI1": {
			"Type": "AWS::EC2::NetworkInterface",
			"Properties": {
				"Description": "port2",
				"GroupSet": [{
					"Ref": "FGTSecGrpBase"
				}],
				"SourceDestCheck": "false",
				"SubnetId": {
					"Ref": "PrivateSubnet1"
				},
				"PrivateIpAddresses": [{
					"PrivateIpAddress": {
						"Fn::Select": ["0", {
							"Fn::Split": ["/", {
								"Ref": "FortiGate1PrivateIP"
							}]
						}]
					},
					"Primary": "true"
				}],
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Join": [
							"", [{
									"Ref": "AWS::StackName"
								},
								"-Fgt1ENI1"
							]
						]
					}
				}]
			}
		},
		"Fgt2ENI1": {
			"Type": "AWS::EC2::NetworkInterface",
			"Properties": {
				"Description": "port2",
				"GroupSet": [{
					"Ref": "FGTSecGrpBase"
				}],
				"SourceDestCheck": "false",
				"SubnetId": {
					"Ref": "PrivateSubnet2"
				},
				"PrivateIpAddresses": [{
					"PrivateIpAddress": {
						"Fn::Select": ["0", {
							"Fn::Split": ["/", {
								"Ref": "FortiGate2PrivateIP"
							}]
						}]
					},
					"Primary": "true"
				}],
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Join": [
							"", [{
									"Ref": "AWS::StackName"
								},
								"-Fgt2ENI1"
							]
						]
					}
				}]
			}
		},
		"Fgt1EIP": {
			"Type": "AWS::EC2::EIP",
			"Properties": {
				"Domain": "vpc"
			},
			"DependsOn": "Fgt1"
		},
		"Fgt2EIP": {
			"Type": "AWS::EC2::EIP",
			"Properties": {
				"Domain": "vpc"
			},
			"DependsOn": "Fgt2"
		},
		"ClusterEIP": {
			"Type": "AWS::EC2::EIP",
			"Properties": {
				"Domain": "vpc"
			},
			"DependsOn": "Fgt1"
		},
		"Fgt1EIPASSOCIATION": {
			"Type": "AWS::EC2::EIPAssociation",
			"Properties": {
				"AllocationId": {
					"Fn::GetAtt": ["Fgt1EIP", "AllocationId"]
				},
				"NetworkInterfaceId": {
					"Ref": "Fgt1ENI0"
				}
			},
			"DependsOn": "Fgt1EIP"
		},
		"Fgt2EIPASSOCIATION": {
			"Type": "AWS::EC2::EIPAssociation",
			"Properties": {
				"AllocationId": {
					"Fn::GetAtt": ["Fgt2EIP", "AllocationId"]
				},
				"NetworkInterfaceId": {
					"Ref": "Fgt2ENI0"
				}
			},
			"DependsOn": "Fgt2EIP"
		},
		"ClusterEIPASSOCIATION": {
			"Type": "AWS::EC2::EIPAssociation",
			"Properties": {
				"AllocationId": {
					"Fn::GetAtt": ["ClusterEIP", "AllocationId"]
				},
				"NetworkInterfaceId": {
					"Ref": "Fgt1ENI0"
				},
				"PrivateIpAddress": {
					"Fn::Select": ["0", {
						"Fn::GetAtt": ["Fgt1ENI0", "SecondaryPrivateIpAddresses"]
					}]
				}
			},
			"DependsOn": "ClusterEIP"
		},
		"PrivateRouteTable": {
			"Type": "AWS::EC2::RouteTable",
			"Properties": {
				"VpcId": {
					"Ref": "VPCID"
				},
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Join": [
							"", [{
									"Ref": "AWS::StackName"
								},
								"-TgwRouteTable"
							]
						]
					}
				}]
			}
		},
		"DefaultRoute": {
			"Type": "AWS::EC2::Route",
			"Properties": {
				"RouteTableId": {
					"Ref": "PrivateRouteTable"
				},
				"DestinationCidrBlock": "0.0.0.0/0",
				"NetworkInterfaceId": {
					"Ref": "Fgt1ENI1"
				}
			}
		},
		"AZ1SubnetRouteTableAssociation": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "TgwSubnet1"
				},
				"RouteTableId": {
					"Ref": "PrivateRouteTable"
				}
			}
		},
		"AZ2SubnetRouteTableAssociation": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "TgwSubnet2"
				},
				"RouteTableId": {
					"Ref": "PrivateRouteTable"
				}
			}
		},
		"Fgt1EC2AutoRecovery": {
			"Type": "AWS::CloudWatch::Alarm",
			"Properties": {
				"AlarmDescription": "EC2 AutoRecovery for Fgt1",
				"Namespace": "AWS/EC2",
				"MetricName": "StatusCheckFailed_System",
				"Statistic": "Minimum",
				"Period": "60",
				"EvaluationPeriods": "15",
				"ComparisonOperator": "GreaterThanThreshold",
				"Threshold": "0",
				"AlarmActions": [{
					"Fn::Join": ["", ["arn:aws:automate:", {
						"Ref": "AWS::Region"
					}, ":ec2:recover"]]
				}],
				"Dimensions": [{
					"Name": "InstanceId",
					"Value": {
						"Ref": "Fgt1"
					}
				}]
			}
		},
		"Fgt2EC2AutoRecovery": {
			"Type": "AWS::CloudWatch::Alarm",
			"Properties": {
				"AlarmDescription": "EC2 AutoRecovery for Fgt2",
				"Namespace": "AWS/EC2",
				"MetricName": "StatusCheckFailed_System",
				"Statistic": "Minimum",
				"Period": "60",
				"EvaluationPeriods": "15",
				"ComparisonOperator": "GreaterThanThreshold",
				"Threshold": "0",
				"AlarmActions": [{
					"Fn::Join": ["", ["arn:aws:automate:", {
						"Ref": "AWS::Region"
					}, ":ec2:recover"]]
				}],
				"Dimensions": [{
					"Name": "InstanceId",
					"Value": {
						"Ref": "Fgt2"
					}
				}]
			}
		},
		"HealthCheckLogGroup": {
			"Type": "AWS::Logs::LogGroup",
			"Properties": {
				"LogGroupName": {
					"Fn::Join": [
						"", [
							"/aws/lambda/",
							{
								"Ref": "HealthCheckLambda"
							}
						]
					]
				}
			}
		},
		"FailoverTopic": {
			"Type": "AWS::SNS::Topic",
			"Properties": {
				"Subscription": [{
					"Endpoint": {
						"Ref": "EmailNotification"
					},
					"Protocol": "email"
				}],
				"TopicName": {
					"Fn::Join": [
						"", [{
								"Ref": "AWS::StackName"
							},
							"-FailoverTopic"
						]
					]
				}
			}
		},
		"FailoverMetricFilter": {
			"Type": "AWS::Logs::MetricFilter",
			"Properties": {
				"LogGroupName": {
					"Ref": "HealthCheckLogGroup"
				},
				"FilterPattern": "Triggering_CloudWatch_Failover_Alarm",
				"MetricTransformations": [{
					"MetricValue": "1",
					"MetricNamespace": "LogMetrics",
					"MetricName": {
						"Fn::Join": [
							"", [{
									"Ref": "AWS::StackName"
								},
								"-Failover-Alarm"
							]
						]
					}
				}]
			}
		},
		"FailoverAlarm": {
			"Type": "AWS::CloudWatch::Alarm",
			"Properties": {
				"AlarmDescription": "Failover alarm if active or both units are down.",
				"Namespace": "LogMetrics",
				"MetricName": {
					"Fn::Join": [
						"", [{
								"Ref": "AWS::StackName"
							},
							"-Failover-Alarm"
						]
					]
				},
				"Statistic": "Sum",
				"Period": "300",
				"EvaluationPeriods": "1",
				"ComparisonOperator": "GreaterThanThreshold",
				"Threshold": "0",
				"TreatMissingData": "notBreaching",
				"AlarmActions": [{
					"Ref": "FailoverTopic"
				}]
			}
		},
		"VPCEndpointEC2": {
			"Type": "AWS::EC2::VPCEndpoint",
			"Properties": {
				"VpcEndpointType": "Interface",
				"PrivateDnsEnabled": true,
				"VpcId": {
					"Ref": "VPCID"
				},
				"SecurityGroupIds": [{
					"Ref": "LambdaSecGrp"
				}],
				"SubnetIds": [{
					"Ref": "PrivateSubnet1"
				}, {
					"Ref": "PrivateSubnet2"
				}],
				"ServiceName": {
					"Fn::Join": ["", ["com.amazonaws.", {
						"Ref": "AWS::Region"
					}, ".ec2"]]
				}
			}
		},
		"HealthCheckAPI": {
			"Type": "AWS::ApiGateway::RestApi",
			"Properties": {
				"Name": {
					"Fn::Join": [
						"", [{
								"Ref": "AWS::StackName"
							},
							"-HealthCheckAPI"
						]
					]
				},
				"Description": "API used for health check requests",
				"ApiKeySourceType": "HEADER",
				"FailOnWarnings": true
			}
		},
		"HealthCheckAPIAccount": {
			"Type": "AWS::ApiGateway::Account",
			"Properties": {
				"CloudWatchRoleArn": {
					"Fn::GetAtt": ["HealthCheckAPIRole", "Arn"]
				}
			}
		},
		"HealthCheckAPIDeployment": {
			"Type": "AWS::ApiGateway::Deployment",
			"DependsOn": ["HealthCheckAPIMethodPOST"],
			"Properties": {
				"RestApiId": {
					"Ref": "HealthCheckAPI"
				},
				"StageName": "prod"
			}
		},
		"HealthCheckAPIResource": {
			"Type": "AWS::ApiGateway::Resource",
			"Properties": {
				"RestApiId": {
					"Ref": "HealthCheckAPI"
				},
				"ParentId": {
					"Fn::GetAtt": ["HealthCheckAPI", "RootResourceId"]
				},
				"PathPart": "healthcheck"
			}
		},
		"HealthCheckAPIMethodPOST": {
			"DependsOn": "PermissionForAPIGatewayToEnvokeLambda",
			"Type": "AWS::ApiGateway::Method",
			"Properties": {
				"AuthorizationType": "NONE",
				"ApiKeyRequired": true,
				"HttpMethod": "POST",
				"Integration": {
					"Type": "AWS",
					"IntegrationHttpMethod": "POST",
					"Uri": {
						"Fn::Join": ["", ["arn:aws:apigateway:", {
							"Ref": "AWS::Region"
						}, ":lambda:path/2015-03-31/functions/", {
							"Fn::GetAtt": ["HealthCheckLambda", "Arn"]
						}, "/invocations"]]
					},
					"IntegrationResponses": [{
						"StatusCode": 200
					}]
				},
				"ResourceId": {
					"Ref": "HealthCheckAPIResource"
				},
				"RestApiId": {
					"Ref": "HealthCheckAPI"
				},
				"MethodResponses": [{
					"StatusCode": 200
				}]
			}
		},
		"HealthCheckAPIUsagePlan": {
			"DependsOn": ["HealthCheckAPIDeployment"],
			"Type": "AWS::ApiGateway::UsagePlan",
			"Properties": {
				"ApiStages": [{
					"ApiId": {
						"Ref": "HealthCheckAPI"
					},
					"Stage": "prod"
				}],
				"Description": "HealthCheckAPIUsagePlan",
				"UsagePlanName": {
					"Fn::Join": [
						"", [{
								"Ref": "AWS::StackName"
							},
							"-HealthCheckAPIUsagePlan"
						]
					]
				}
			}
		},
		"HealthCheckAPIUsagePlanKey": {
			"Type": "AWS::ApiGateway::UsagePlanKey",
			"Properties": {
				"KeyId": {
					"Ref": "HealthCheckAPIKey"
				},
				"KeyType": "API_KEY",
				"UsagePlanId": {
					"Ref": "HealthCheckAPIUsagePlan"
				}
			}
		},
		"HealthCheckAPIKey": {
			"Type": "AWS::ApiGateway::ApiKey",
			"DependsOn": ["HealthCheckAPIDeployment"],
			"Properties": {
				"Name": {
					"Fn::Join": [
						"", [{
								"Ref": "AWS::StackName"
							},
							"-HealthCheckAPIKey"
						]
					]
				},
				"Description": "HealthCheckAPIKey",
				"Enabled": "true",
				"StageKeys": [{
					"RestApiId": {
						"Ref": "HealthCheckAPI"
					},
					"StageName": "prod"
				}]
			}
		},
		"CloudWatchEventRule": {
			"Type": "AWS::Events::Rule",
			"Properties": {
				"Description": "CloudWatchEventRule",
				"ScheduleExpression": "rate(1 minute)",
				"State": "ENABLED",
				"Targets": [{
					"Arn": {
						"Fn::GetAtt": [
							"HealthCheckLambda",
							"Arn"
						]
					},
					"Id": "TargetFunctionV1"
				}]
			}
		},
		"HealthCheckLambda": {
			"Type": "AWS::Lambda::Function",
			"DependsOn": [
				"HealthCheckLambdaRole",
				"HealthCheckLambdaPolicy"
			],
			"Properties": {
				"Code": {
					"S3Bucket": {
						"Fn::FindInMap": ["RegionMap", {
							"Ref": "AWS::Region"
						}, "LambdaCode"]
					},
					"S3Key": "ap-healthcheck-v2.zip"
				},
				"Environment": {
					"Variables": {
						"HAPairValue": {
							"Ref": "HAPairTagValue"
						},
						"VPCID": {
							"Ref": "VPCID"
						},
						"HealthCheckPort": {
							"Ref": "LambdaHealthCheckPort"
						},
						"VPCEndpointURL": {
							"Fn::Join": [
								"", ["https://", {
									"Fn::Select": ["1", {
										"Fn::Split": [":", {
											"Fn::Select": ["0", {
												"Fn::GetAtt": ["VPCEndpointEC2", "DnsEntries"]
											}]
										}]
									}]
								}]
							]
						}
					}
				},
				"Role": {
					"Fn::GetAtt": [
						"HealthCheckLambdaRole",
						"Arn"
					]
				},
				"VpcConfig": {
					"SecurityGroupIds": [{
						"Ref": "LambdaSecGrp"
					}],
					"SubnetIds": [{
							"Ref": "PrivateSubnet1"
						},
						{
							"Ref": "PrivateSubnet2"
						}
					]
				},
				"Timeout": 60,
				"Handler": "healthcheck.lambda_handler",
				"Runtime": "python2.7",
				"MemorySize": 128
			}
		},
		"LambdaSecGrp": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "LambdaSecGrp",
				"VpcId": {
					"Ref": "VPCID"
				},
				"SecurityGroupIngress": [{
					"IpProtocol": "-1",
					"FromPort": "0",
					"ToPort": "65535",
					"CidrIp": {
						"Ref": "VPCCIDR"
					}
				}],
				"SecurityGroupEgress": [{
					"IpProtocol": "-1",
					"CidrIp": "0.0.0.0/0"
				}]
			}
		},
		"HealthCheckAPIRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
						"Effect": "Allow",
						"Principal": {
							"Service": ["apigateway.amazonaws.com"]
						},
						"Action": ["sts:AssumeRole"]
					}]
				},
				"Policies": [{
					"PolicyName": "ApiGatewayLogsPolicy",
					"PolicyDocument": {
						"Version": "2012-10-17",
						"Statement": [{
							"Effect": "Allow",
							"Action": [
								"logs:CreateLogGroup",
								"logs:CreateLogStream",
								"logs:DescribeLogGroups",
								"logs:DescribeLogStreams",
								"logs:PutLogEvents",
								"logs:GetLogEvents",
								"logs:FilterLogEvents"
							],
							"Resource": "*"
						}]
					}
				}]
			}
		},
		"PermissionForAPIGatewayToEnvokeLambda": {
			"Type": "AWS::Lambda::Permission",
			"Properties": {
				"Action": "lambda:invokeFunction",
				"FunctionName": {
					"Fn::GetAtt": ["HealthCheckLambda", "Arn"]
				},
				"Principal": "apigateway.amazonaws.com",
				"SourceArn": {
					"Fn::Join": ["", ["arn:aws:execute-api:", {
						"Ref": "AWS::Region"
					}, ":", {
						"Ref": "AWS::AccountId"
					}, ":", {
						"Ref": "HealthCheckAPI"
					}, "/*"]]
				}
			}
		},
		"PermissionForEventsToInvokeLambda": {
			"Type": "AWS::Lambda::Permission",
			"Properties": {
				"FunctionName": {
					"Ref": "HealthCheckLambda"
				},
				"Action": "lambda:InvokeFunction",
				"Principal": "events.amazonaws.com",
				"SourceArn": {
					"Fn::GetAtt": [
						"CloudWatchEventRule",
						"Arn"
					]
				}
			}
		},
		"HealthCheckLambdaRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
						"Effect": "Allow",
						"Principal": {
							"Service": [
								"lambda.amazonaws.com"
							]
						},
						"Action": [
							"sts:AssumeRole"
						]
					}]
				},
				"Path": "/"
			}
		},
		"HealthCheckLambdaPolicy": {
			"DependsOn": [
				"HealthCheckLambdaRole"
			],
			"Type": "AWS::IAM::Policy",
			"Properties": {
				"PolicyName": "HealthCheckLambdaPolicy",
				"Roles": [{
					"Ref": "HealthCheckLambdaRole"
				}],
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
						"Effect": "Allow",
						"Action": [
							"logs:CreateLogGroup",
							"logs:CreateLogStream",
							"logs:PutLogEvents",
							"ec2:CreateNetworkInterface",
							"ec2:DescribeNetworkInterfaces",
							"ec2:DeleteNetworkInterface",
							"ec2:DescribeInstances",
							"ec2:DescribeAddresses",
							"ec2:AssociateAddress",
							"ec2:DescribeRouteTables",
							"ec2:ReplaceRoute",
							"ec2:CreateTags"
						],
						"Resource": [
							"*"
						]
					}]
				}
			}
		},
		"LambdaRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
						"Effect": "Allow",
						"Principal": {
							"Service": [
								"lambda.amazonaws.com"
							]
						},
						"Action": [
							"sts:AssumeRole"
						]
					}]
				},
				"Path": "/",
				"Policies": [{
					"PolicyName": "S3AccessRole",
					"PolicyDocument": {
						"Version": "2012-10-17",
						"Statement": [{
								"Effect": "Allow",
								"Action": [
									"s3:PutObject"
								],
								"Resource": "*"
							},
							{
								"Effect": "Allow",
								"Action": [
									"logs:*"
								],
								"Resource": "*"
							}
						]
					}
				}]
			}
		},
		"InitFunction": {
			"Type": "AWS::Lambda::Function",
			"DependsOn": "LambdaRole",
			"Properties": {
				"Code": {
					"ZipFile": {
						"Fn::Join": ["\n", [
							"import ast",
							"import boto3",
							"import cfnresponse",
							"import json",
							"import logging",
							"logger = logging.getLogger()",
							"logger.setLevel(logging.INFO)",
							"s3 = boto3.client('s3')",
							"",
							"template = '''\\",
							"config system global",
							"set hostname {Hostname}",
							"set admintimeout 60",
							"end",
							"config system interface",
							"edit port1",
							"set alias public",
							"set mode static",
							"set ip {Port1IP1}",
							"set allowaccess ping https ssh fgfm",
							"set secondary-IP enable",
							"config secondaryip",
							"edit 1",
							"set ip {Port1IP2}",
							"set allowaccess ping https ssh",
							"next",
							"end",
							"next",
							"edit port2",
							"set alias private",
							"set mode dhcp",
							"set defaultgw disable",
							"set dns-server-override disable",
							"set allowaccess ping fgfm",
							"set mtu-override enable",
							"set mtu 9001",
							"next",
							"end",
							"config router static",
							"edit 1",
							"set device port1",
							"set gateway {PublicSubnetRouterIP}",
							"next",
							"edit 2",
							"set dst {VPCCIDR}",
							"set device port2",
							"set gateway {PrivateSubnetRouterIP}",
							"next",
							"edit 3",
							"set dst {SPOKE1VPCCIDR}",
							"set device port2",
							"set gateway {PrivateSubnetRouterIP}",
							"next",
							"edit 4",
							"set dst {SPOKE2VPCCIDR}",
							"set device port2",
							"set gateway {PrivateSubnetRouterIP}",
							"next",
							"end",
							"config firewall ippool",
							"edit cluster-ippool",
							"set startip {IPPool}",
							"set endip {IPPool}",
							"next",
							"end",
							"config firewall policy",
							"edit 1",
							"set name outbound-all",
							"set srcintf port2",
							"set dstintf port1",
							"set srcaddr all",
							"set dstaddr all",
							"set action accept",
							"set schedule always",
							"set service ALL",
							"set logtraffic all",
							"set ippool enable",
							"set poolname cluster-ippool",
							"set nat enable",
							"next",
							"edit 2",
							"set name spoke2spoke",
							"set srcintf port2",
							"set dstintf port2",
							"set srcaddr all",
							"set dstaddr all",
							"set action accept",
							"set schedule always",
							"set service ALL",
							"set logtraffic all",
							"next",
							"end",
							"config system automation-trigger",
							"edit healthcheck-trigger",
							"set event-type event-log",
							"set logid 22922",
							"next",
							"end",
							"config system automation-action",
							"edit healthcheck-action",
							"set action-type aws-lambda",
							"set aws-api-path healthcheck",
							"set aws-api-stage prod",
							"set aws-region {Region}",
							"set aws-api-id {HealthCheckAPI}",
							"set aws-api-key {HealthCheckAPIKey}",
							"next",
							"end",
							"config system automation-stitch",
							"edit healthcheck-stitch",
							"set trigger healthcheck-trigger",
							"set action healthcheck-action",
							"next",
							"end",
							"config system link-monitor",
							"edit fgt-peer",
							"set srcintf port2",
							"set server {PeerIP}",
							"set update-cascade-interface disable",
							"set update-static-route disable",
							"next",
							"end\\",
							"'''",
							"",
							"def handler(event, context):",
							"    dict1 = ast.literal_eval(event['ResourceProperties']['FGT1Info'])",
							"    dict2 = ast.literal_eval(event['ResourceProperties']['FGT2Info'])",
							"    fgt1_conf = template.format(**dict1)",
							"    fgt2_conf = template.format(**dict2)",
							"    fgt1_result = False",
							"    fgt2_result = False",
							"    logger.info('<-- event received: {}'.format(json.dumps(event)))",
							"",
							"    try:",
							"        resp = s3.put_object(Body=fgt1_conf, Bucket=event['ResourceProperties']['S3Bucket'], Key='fgt1.txt')",
							"    except Exception as error:",
							"        logger.error('<--!! Exception: {}'.format(error))",
							"        responseData = {'msg':'error'}",
							"        cfnresponse.send(event, context, cfnresponse.FAILED, responseData)",
							"    if resp['ResponseMetadata']['HTTPStatusCode'] == 200:",
							"        fgt1_result = True",
							"        logger.info('<-- s3 put_object fgt1.txt successful')",
							"",
							"    try:",
							"        resp = s3.put_object(Body=fgt2_conf, Bucket=event['ResourceProperties']['S3Bucket'], Key='fgt2.txt')",
							"    except Exception as error:",
							"        logger.error('<--!! Exception: {}'.format(error))",
							"        responseData = {'msg':'error'}",
							"        cfnresponse.send(event, context, cfnresponse.FAILED, responseData)",
							"    if resp['ResponseMetadata']['HTTPStatusCode'] == 200:",
							"        fgt2_result = True",
							"        logger.info('<-- s3 put_object fgt2.txt successful')",
							"",
							"    if fgt1_result is True and fgt2_result is True:",
							"        responseData = {'msg':'200'}",
							"        cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)",
							"    else:",
							"        responseData = {'msg':'error'}",
							"        cfnresponse.send(event, context, cfnresponse.FAILED, responseData)",
							""
						]]
					}
				},
				"Role": {
					"Fn::GetAtt": [
						"LambdaRole",
						"Arn"
					]
				},
				"Timeout": 120,
				"Handler": "index.handler",
				"Runtime": "python2.7",
				"MemorySize": 128
			}
		},
		"RunInitFunction": {
			"Type": "Custom::InitFunction",
			"DependsOn": "InitFunction",
			"Properties": {
				"ServiceToken": {
					"Fn::GetAtt": [
						"InitFunction",
						"Arn"
					]
				},
				"S3Bucket": {
					"Ref": "InitS3Bucket"
				},
				"FGT1Info": {
					"Fn::Join": [
						"", ["{",
							"'VPCCIDR':'",
							{
								"Ref": "VPCCIDR"
							},
							"',",
							"'SPOKE1VPCCIDR':'",
							{
								"Ref": "SPOKE1VPCCIDR"
							},
							"',",
							"'SPOKE2VPCCIDR':'",
							{
								"Ref": "SPOKE2VPCCIDR"
							},
							"',",
							"'Region':'",
							{
								"Ref": "AWS::Region"
							},
							"',",
							"'HealthCheckAPI':'",
							{
								"Ref": "HealthCheckAPI"
							},
							"',",
							"'HealthCheckAPIKey':'",
							{
								"Ref": "HealthCheckAPIKey"
							},
							"',",
							"'PublicSubnetRouterIP':'",
							{
								"Ref": "PublicSubnet1RouterIP"
							},
							"',",
							"'PrivateSubnetRouterIP':'",
							{
								"Ref": "PrivateSubnet1RouterIP"
							},
							"',",
							"'Port1IP1':'",
							{
								"Ref": "FortiGate1PublicIP"
							},
							"',",
							"'Port1IP2':'",
							{
								"Ref": "FortiGate1SecondPublicIP"
							},
							"',",
							"'IPPool':'",
							{
								"Fn::Select": ["0", {
									"Fn::Split": ["/", {
										"Ref": "FortiGate1SecondPublicIP"
									}]
								}]
							},
							"',",
							"'PeerIP':'",
							{
								"Fn::Select": ["0", {
									"Fn::Split": ["/", {
										"Ref": "FortiGate2PrivateIP"
									}]
								}]
							},
							"',",
							"'Hostname':'Fgt1'",
							"}"
						]
					]
				},
				"FGT2Info": {
					"Fn::Join": [
						"", ["{",
							"'VPCCIDR':'",
							{
								"Ref": "VPCCIDR"
							},
							"',",
							"'SPOKE1VPCCIDR':'",
							{
								"Ref": "SPOKE1VPCCIDR"
							},
							"',",
							"'SPOKE2VPCCIDR':'",
							{
								"Ref": "SPOKE2VPCCIDR"
							},
							"',",
							"'Region':'",
							{
								"Ref": "AWS::Region"
							},
							"',",
							"'HealthCheckAPI':'",
							{
								"Ref": "HealthCheckAPI"
							},
							"',",
							"'HealthCheckAPIKey':'",
							{
								"Ref": "HealthCheckAPIKey"
							},
							"',",
							"'PublicSubnetRouterIP':'",
							{
								"Ref": "PublicSubnet2RouterIP"
							},
							"',",
							"'PrivateSubnetRouterIP':'",
							{
								"Ref": "PrivateSubnet2RouterIP"
							},
							"',",
							"'Port1IP1':'",
							{
								"Ref": "FortiGate2PublicIP"
							},
							"',",
							"'Port1IP2':'",
							{
								"Ref": "FortiGate2SecondPublicIP"
							},
							"',",
							"'IPPool':'",
							{
								"Fn::Select": ["0", {
									"Fn::Split": ["/", {
										"Ref": "FortiGate2SecondPublicIP"
									}]
								}]
							},
							"',",
							"'PeerIP':'",
							{
								"Fn::Select": ["0", {
									"Fn::Split": ["/", {
										"Ref": "FortiGate1PrivateIP"
									}]
								}]
							},
							"',",
							"'Hostname':'Fgt2'",
							"}"
						]
					]
				}
			}
		}
	},
	"Outputs": {
		"Username": {
			"Value": "admin",
			"Description": "Username for the Fortigates"
		},
		"Fgt1Password": {
			"Value": {
				"Ref": "Fgt1"
			},
			"Description": "Initial password for FortiGate1"
		},
		"Fgt2Password": {
			"Value": {
				"Ref": "Fgt2"
			},
			"Description": "Initial password for FortiGate2"
		},
		"FloatingEIPLoginURL": {
			"Value": {
				"Fn::Join": [
					"", [
						"https://", {
							"Ref": "ClusterEIP"
						}
					]
				]
			},
			"Description": "Login URL for the public interface of the active FortiGate"
		},
		"Fgt1LoginURL": {
			"Value": {
				"Fn::Join": [
					"", [
						"https://", {
							"Ref": "Fgt1EIP"
						}
					]
				]
			},
			"Description": "Login URL for the public interface of FortiGate1"
		},
		"Fgt2LoginURL": {
			"Value": {
				"Fn::Join": [
					"", [
						"https://", {
							"Ref": "Fgt2EIP"
						}
					]
				]
			},
			"Description": "Login URL for the public interface of FortiGate2"
		},
		"HealthCheckAPIURL": {
			"Description": "AWS API Gateway URL",
			"Value": {
				"Fn::Join": ["", ["https://", {
					"Ref": "HealthCheckAPI"
				}, ".execute-api.", {
					"Ref": "AWS::Region"
				}, ".amazonaws.com", "/prod/healthcheck"]]
			}
		},
		"HealthCheckAPIKeyID": {
			"Description": "AWS API KeyID (get secret key value from AWS console)",
			"Value": {
				"Ref": "HealthCheckAPIKey"
			}
		}
	}
}